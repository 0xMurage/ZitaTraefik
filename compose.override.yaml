services:
  zitadel:
    networks:
      - monocots
    depends_on:
      postgres_db:
        condition: service_healthy

  postgres_db:
    image: docker.io/postgres:16.3-alpine3.20
    volumes:
      - commelinids:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${ZITADEL_POSTGRES_DATABASE_NAME?}
      - POSTGRES_USER=${ZITADEL_STORAGE_POSTGRES_USERNAME?}
      - POSTGRES_PASSWORD=${ZITADEL_STORAGE_POSTGRES_PASSWORD?}
    networks:
      - monocots
    healthcheck:
      test: [ 'CMD-SHELL','pg_isready -d ${ZITADEL_POSTGRES_DATABASE_NAME} -U ${ZITADEL_STORAGE_POSTGRES_USERNAME}' ]
      interval: 5s
      timeout: 5s
      retries: 5

  gateway_proxy:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs/pebble.minica.pem:/pebble.minica.pem

    environment:
      LEGO_CA_CERTIFICATES: /pebble.minica.pem
      LEGO_CA_SERVER_NAME: pebble
    networks:
      - bojack
    depends_on:
      pebble_acme:
        condition: service_started
        required: true

  pebble_acme:
    image: ghcr.io/letsencrypt/pebble:latest
    expose:
      - 14000
    environment:
      PEBBLE_VA_NOSLEEP: 1
      PEBBLE_VA_ALWAYS_VALID: 1
    networks:
      - bojack

volumes:
  commelinids:

networks:
  monocots:
    driver: bridge
  bojack:
    driver: bridge
